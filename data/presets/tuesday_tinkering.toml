id = "DsccRS"
name = "Tuesday tinkering"
username = "mrange"
description = """
CC0: Tuesday tinkering
Experimenting with hextiling, beziers and glow
"""
resolution_scale = 1.0
time_scale = 0.2
time_offset = "0s"
interval_between_frames = "0s"
screen_bounds_policy = "all_monitors"
monitor_selection = ["*"]
layout_mode = "stretch"
filter_mode = "linear"
crossfade_overlap_ratio = 0.0

[image]
shader = """
// CC0: Tuesday tinkering
//   Experimenting with hextiling, beziers and glow


// Less calming, more flickering
// #define FLICKER

// Applies mobius transform tinkering
// #define DISTORT

#define TIME        iTime
#define RESOLUTION  iResolution
#define PI          3.141592654
#define TAU         (2.0*PI)

#define ROT(a)     mat2(cos(a), sin(a), -sin(a), cos(a))
#define OFF6(n)    (vec2(1.0, 0.0)*ROT(n*TAU/6.))

const vec2 off6[6] = vec2[6](
    OFF6(0.)
  , OFF6(1.)
  , OFF6(2.)
  , OFF6(3.)
  , OFF6(4.)
  , OFF6(5.)
  );

const vec2 noff6[6] = vec2[6](
    vec2(-1.0, 0.0)
  , vec2(-0.5, 0.5)
  , vec2( 0.5, 0.5)
  , vec2( 1.0, 0.0)
  , vec2( 0.5,-0.5)
  , vec2(-0.5,-0.5)
  );

// License: Unknown, author: Martijn Steinrucken, found: https://www.youtube.com/watch?v=VmrIDyYiJBA
vec2 hextile(inout vec2 p) {
  // See Art of Code: Hexagonal Tiling Explained!
  // https://www.youtube.com/watch?v=VmrIDyYiJBA
  const vec2 sz       = vec2(1.0, sqrt(3.0));
  const vec2 hsz      = 0.5*sz;

  vec2 p1 = mod(p, sz)-hsz;
  vec2 p2 = mod(p - hsz, sz)-hsz;
  vec2 p3 = dot(p1, p1) < dot(p2, p2) ? p1 : p2;
  vec2 n = ((p3 - p + hsz)/sz);
  p = p3;

  n -= vec2(0.5);
  // Rounding to make hextile 0,0 well behaved
  return round(n*2.0)*0.5;
}

// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm
float hexagon(vec2 p, float r) {
  p = p.yx;
  const vec3 k = 0.5*vec3(-sqrt(3.0), 1.0, sqrt(4.0/3.0));
  p = abs(p);
  p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;
  p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);
  return length(p)*sign(p.y);
}

// License: Unknown, author: Unknown, found: don't remember
float hash(vec2 co) {
  co += 1.234;
  return fract(sin(dot(co.xy ,vec2(12.9898,58.233))) * 13758.5453);
}

// License: Unknown, author: Unknown, found: don't remember
float hash(float co) {
  return fract(sin(co*12.9898) * 13758.5453);
}

float dot2(vec2 p) {
  return dot(p, p);
}

// License: MIT, author: Inigo Quilez, found: https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm
float bezier(vec2 pos, vec2 A, vec2 B, vec2 C) {
    vec2 a = B - A;
    vec2 b = A - 2.0*B + C;
    vec2 c = a * 2.0;
    vec2 d = A - pos;
    float kk = 1.0/dot(b,b);
    float kx = kk * dot(a,b);
    float ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;
    float kz = kk * dot(d,a);
    float res = 0.0;
    float p = ky - kx*kx;
    float p3 = p*p*p;
    float q = kx*(2.0*kx*kx-3.0*ky) + kz;
    float h = q*q + 4.0*p3;
    if( h >= 0.0)
    {
        h = sqrt(h);
        vec2 x = (vec2(h,-h)-q)/2.0;
        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));
        float t = clamp( uv.x+uv.y-kx, 0.0, 1.0 );
        res = dot2(d + (c + b*t)*t);
    }
    else
    {
        float z = sqrt(-p);
        float v = acos( q/(p*z*2.0) ) / 3.0;
        float m = cos(v);
        float n = sin(v)*1.732050808;
        vec3  t = clamp(vec3(m+m,-n-m,n-m)*z-kx,0.0,1.0);
        res = min( dot2(d+(c+b*t.x)*t.x),
                   dot2(d+(c+b*t.y)*t.y) );
        // the third root cannot be the closest
        // res = min(res,dot2(d+(c+b*t.z)*t.z));
    }
    return sqrt( res );
}

vec2 coff(float h) {
  float h0 = h;
  float h1 = fract(h0*9677.0);
  float h2 = fract(h0*8677.0);
  float t = mix(0.5, 1.0, h2*h2)*TIME+1234.5*h0;
  return mix(0.1, 0.2, h1*h1)*sin(t*vec2(1.0, sqrt(0.5)));
}

// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/
vec3 aces_approx(vec3 v) {
  v = max(v, 0.0);
  v *= 0.6f;
  float a = 2.51f;
  float b = 0.03f;
  float c = 2.43f;
  float d = 0.59f;
  float e = 0.14f;
  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);
}

vec2 toSmith(vec2 p)  {
  // z = (p + 1)/(-p + 1)
  // (x,y) = ((1+x)*(1-x)-y*y,2y)/((1-x)*(1-x) + y*y)
  float d = (1.0 - p.x)*(1.0 - p.x) + p.y*p.y;
  float x = (1.0 + p.x)*(1.0 - p.x) - p.y*p.y;
  float y = 2.0*p.y;
  return vec2(x,y)/d;
}

vec2 fromSmith(vec2 p)  {
  // z = (p - 1)/(p + 1)
  // (x,y) = ((x+1)*(x-1)+y*y,2y)/((x+1)*(x+1) + y*y)
  float d = (p.x + 1.0)*(p.x + 1.0) + p.y*p.y;
  float x = (p.x + 1.0)*(p.x - 1.0) + p.y*p.y;
  float y = 2.0*p.y;
  return vec2(x,y)/d;
}


vec2 transform(vec2 p) {
  p *= 2.0;
  vec2 sp0 = toSmith(p-0.);
  vec2 sp1 = toSmith(p+vec2(1.0)*ROT(0.12*TIME));
  vec2 sp2 = toSmith(p-vec2(1.0)*ROT(0.23*TIME));
  p = fromSmith(sp0+sp1-sp2);
  return p;
}



void mainImage( out vec4 fragColor, in vec2 fragCoord) {
  vec2 q = fragCoord/RESOLUTION.xy;
  vec2 p = -1. + 2. * q;
  vec2 pp = p;
  p.x *= RESOLUTION.x/RESOLUTION.y;

  float aa = 4.0/RESOLUTION.y;

  vec2 hp = p;
#ifdef DISTORT
  vec2 nhp = transform(hp+aa);
  hp = transform(hp);
  float scale = distance(nhp, hp);
#else
  hp *= 3.0;
#endif

  const float ga = 100.0;
  hp += ga*sin(vec2(1.0, sqrt(0.5))*TAU*(TIME-300.0)/(8.0*ga));
  vec2 hn = hextile(hp);

  float h0 = hash(hn);
  vec2 p0 = coff(h0);

  vec3 bcol = 0.5*(1.0+cos(vec3(0.0, 1.0, 2.0) + dot(p, p)-0.5*TIME));
  vec3 col = vec3(0.0);

#ifdef DISTORT
  float mx = 0.0005+0.01*scale;
#else
  const float mx = 0.0005;
#endif

  for (int i = 0; i < 6; ++i) {
    float h1 = hash(hn+noff6[i]);
    vec2 p1 = off6[i]+coff(h1);

#if defined(FLICKER)
    float fade = (smoothstep(1.05, 0.9, dot2(p0-p1))) > hash(floor(TIME*30.0)+h2) ? 1.0 : 0.0;
#else
    float fade = smoothstep(1.05, 0.85, distance(p0, p1));
#endif
    if (fade < 0.025) continue;

    float h2 = h0+h1;
    vec2 p2 = 0.5*(p1+p0)+coff(h2);

    float dd = bezier(hp, p0, p2, p1);
    float gd = abs(dd);
    gd *= sqrt(gd);
    gd = max(gd, mx);
    col += fade*0.002*bcol/(gd);
  }

  {
    float cd = length(hp-p0);
    float gd = abs(cd);
    gd *= (gd);
    gd = max(gd, mx);
    col += 0.0025*sqrt(bcol)/(gd);
  }

  {
    float hd = hexagon(hp, 0.485);
    float gd = abs(hd);
    gd = max(gd, mx*10.0);
    col += 0.0005*bcol*bcol/(gd);
  }

#ifdef DISTORT
  col += scale*(bcol);
#endif

  col *= smoothstep(1.75, 0.5, length(pp));
  col = aces_approx(col);
  col = sqrt(col);

  fragColor = vec4(col, 1.0);
}"""
